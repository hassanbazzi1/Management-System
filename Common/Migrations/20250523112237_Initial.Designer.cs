// <auto-generated />
using System;
using Common.DB.ClientDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Common.Migrations
{
    [DbContext(typeof(ClientDbContext))]
    [Migration("20250523112237_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("client_template")
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Common.DB.ClientDB.Models.AiAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<int>("InstructionsId")
                        .HasColumnType("integer")
                        .HasColumnName("instructions_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Wid")
                        .HasColumnType("integer")
                        .HasColumnName("wid");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("ai_agent_pk");

                    b.HasIndex("InstructionsId");

                    b.HasIndex("Wid");

                    b.HasIndex(new[] { "Code" }, "ai_agent_unique_key")
                        .IsUnique();

                    b.ToTable("ai_agent", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int?>("EscalationId")
                        .HasColumnType("integer")
                        .HasColumnName("escalation_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_pk");

                    b.HasIndex("ConversationId");

                    b.ToTable("chat", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatEscalation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int>("SourceChatId")
                        .HasColumnType("integer")
                        .HasColumnName("source_chat_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_escalation_pk");

                    b.HasIndex("SourceChatId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("chat_escalation", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatEscalationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_escalation_status_pk");

                    b.ToTable("chat_escalation_status", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<int>("Cid")
                        .HasColumnType("integer")
                        .HasColumnName("cid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsUser")
                        .HasColumnType("boolean")
                        .HasColumnName("is_user");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_message_pk");

                    b.HasIndex("Cid");

                    b.ToTable("chat_message", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<int>("Cid")
                        .HasColumnType("integer")
                        .HasColumnName("cid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<int>("InstanceId")
                        .HasColumnType("integer")
                        .HasColumnName("instance_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_report_pk");

                    b.HasIndex("Cid");

                    b.HasIndex("InstanceId");

                    b.ToTable("chat_report", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportColumnValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<int>("ColumnId")
                        .HasColumnType("integer")
                        .HasColumnName("column_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("ReportId")
                        .HasColumnType("integer")
                        .HasColumnName("report_id");

                    b.Property<byte[]>("Value")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("value");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_report_column_value_pk");

                    b.HasIndex("ColumnId");

                    b.HasIndex("ReportId");

                    b.ToTable("chat_report_column_value", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_report_format_pk");

                    b.HasIndex(new[] { "Code" }, "chat_report_format_unique_key")
                        .IsUnique();

                    b.ToTable("chat_report_format", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<int>("GoogleSheetsId")
                        .HasColumnType("integer")
                        .HasColumnName("google_sheets_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_report_instance_pk");

                    b.HasIndex("GoogleSheetsId");

                    b.HasIndex("TemplateId");

                    b.ToTable("chat_report_instance", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportInstanceGoogleSheets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("CredentialId")
                        .HasColumnType("integer")
                        .HasColumnName("credential_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("SheetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_report_instance_google_sheets_pk");

                    b.HasIndex("CredentialId");

                    b.ToTable("chat_report_instance_google_sheets", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<int>("FormatId")
                        .HasColumnType("integer")
                        .HasColumnName("format_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_report_template_pk");

                    b.HasIndex("FormatId");

                    b.ToTable("chat_report_template", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportTemplateColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_report_template_column_pk");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TypeId");

                    b.ToTable("chat_report_template_column", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportTemplateColumnType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("chat_report_template_column_type_pk");

                    b.ToTable("chat_report_template_column_type", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<int?>("AiAgentId")
                        .HasColumnType("integer")
                        .HasColumnName("ai_agent_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int?>("HumanAgentId")
                        .HasColumnType("integer")
                        .HasColumnName("human_agent_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<int?>("LastChatMessageId")
                        .HasColumnType("integer")
                        .HasColumnName("last_chat_message_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("conversation_pk");

                    b.HasIndex("AiAgentId");

                    b.HasIndex("HumanAgentId");

                    b.HasIndex("LastChatMessageId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("conversation", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<float[]>("Embeddings")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<long>("Xmin")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("documents_pkey");

                    b.ToTable("document", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.GoogleCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("N8NCredentialId")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("n8n_credential_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Privatekey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("private_key");

                    b.Property<string>("ServiceAccount")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("service_account");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("google_credential_pk");

                    b.HasIndex(new[] { "N8NCredentialId" }, "google_credential_unique_key")
                        .IsUnique();

                    b.ToTable("google_credential", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.HumanAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("human_agent_pk");

                    b.HasIndex(new[] { "Phone" }, "human_agent_unique_key")
                        .IsUnique();

                    b.ToTable("human_agent", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("industry_pk");

                    b.ToTable("industry", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Instructions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("instructions_pk");

                    b.ToTable("instructions", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.InstructionsRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("Iid")
                        .HasColumnType("integer")
                        .HasColumnName("iid");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint")
                        .HasColumnName("priority");

                    b.Property<int>("Rid")
                        .HasColumnType("integer")
                        .HasColumnName("rid");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("instructions_rule_pk");

                    b.HasIndex("Iid");

                    b.HasIndex(new[] { "Rid", "Iid" }, "instructions_rule_unique_key")
                        .IsUnique();

                    b.ToTable("instructions_rule", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.InstructionsSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<int>("Iid")
                        .HasColumnType("integer")
                        .HasColumnName("iid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint")
                        .HasColumnName("priority");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("instructions_section_pk");

                    b.HasIndex("Iid");

                    b.ToTable("instructions_section", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.OpenAiCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("model_id");

                    b.Property<string>("N8NCredentialId")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("n8n_credential_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Token")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("token");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("openai_credential_pk");

                    b.HasIndex(new[] { "Token" }, "openai_credential_unique_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "openai_credential_unique_key2")
                        .IsUnique();

                    b.HasIndex(new[] { "N8NCredentialId" }, "openai_credential_unique_key3")
                        .IsUnique();

                    b.ToTable("openai_credential", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company_name");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("facebook_url");

                    b.Property<string>("IdealCustomer")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("ideal_customer");

                    b.Property<int>("IndustryId")
                        .HasColumnType("integer")
                        .HasColumnName("industry_id");

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("instagram_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsDemo")
                        .HasColumnType("boolean")
                        .HasColumnName("is_demo");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("linkedin_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Services")
                        .HasColumnType("text")
                        .HasColumnName("services");

                    b.Property<string>("TiktokUrl")
                        .HasMaxLength(0)
                        .HasColumnType("text")
                        .HasColumnName("tiktok_url");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("website");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Xurl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("x_url");

                    b.HasKey("Id")
                        .HasName("project_pk");

                    b.HasIndex("IndustryId");

                    b.HasIndex(new[] { "Name" }, "project_unique_key")
                        .IsUnique();

                    b.ToTable("project", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Rule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("rule_pk");

                    b.ToTable("rule", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.RuleSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("rule_set_pk");

                    b.ToTable("rule_set", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.RuleSetRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<int>("Rid")
                        .HasColumnType("integer")
                        .HasColumnName("rid");

                    b.Property<int>("Rsid")
                        .HasColumnType("integer")
                        .HasColumnName("rsid");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("rule_set_rules_pk");

                    b.HasIndex("Rsid");

                    b.HasIndex(new[] { "Rid", "Rsid" }, "rule_set_rules_unique_key")
                        .IsUnique();

                    b.ToTable("rule_set_rules", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<int>("ConversationId")
                        .HasColumnType("integer")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("session_pk");

                    b.HasIndex("ConversationId");

                    b.ToTable("session", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("subscription_pk");

                    b.HasIndex("TypeId");

                    b.HasIndex(new[] { "Name" }, "subscription_unique_key")
                        .IsUnique();

                    b.ToTable("subscription", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("subscription_type_pk");

                    b.HasIndex(new[] { "Code" }, "subscription_type_unique_key")
                        .IsUnique();

                    b.ToTable("subscription_type", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.TwilioCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("N8NCredentialId")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("n8n_credential_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Sid")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("sid");

                    b.Property<byte[]>("Token")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("token");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("twilio_credential_pk");

                    b.HasIndex(new[] { "Token" }, "twilio_credential_unique_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "twilio_credential_unique_key2")
                        .IsUnique();

                    b.HasIndex(new[] { "N8NCredentialId" }, "twilio_credential_unique_key3")
                        .IsUnique();

                    b.ToTable("twilio_credential", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("user_pk");

                    b.HasIndex(new[] { "Phone" }, "user_unique_key")
                        .IsUnique();

                    b.ToTable("user", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Json")
                        .HasColumnType("json")
                        .HasColumnName("json");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("workflow_pk");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("TemplateId");

                    b.ToTable("workflow", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.WorkflowTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("Id"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_date");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Json")
                        .HasColumnType("json")
                        .HasColumnName("json");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("workflow_template_pk");

                    b.ToTable("workflow_template", "client_template");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.AiAgent", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.Instructions", "Instructions")
                        .WithMany("AiAgents")
                        .HasForeignKey("InstructionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ai_agent_instructions_id_fk");

                    b.HasOne("Common.DB.ClientDB.Models.Workflow", "Workflow")
                        .WithMany("AiAgents")
                        .HasForeignKey("Wid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ai_agent_workflow__fk");

                    b.Navigation("Instructions");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Chat", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.Conversation", "Conversation")
                        .WithMany("Chats")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_conversation_fk");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatEscalation", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.Chat", "Chat")
                        .WithOne("ChatEscalation")
                        .HasForeignKey("Common.DB.ClientDB.Models.ChatEscalation", "SourceChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_chat_escalation_fk");

                    b.HasOne("Common.DB.ClientDB.Models.ChatEscalationStatus", "ChatEscalationStatus")
                        .WithMany("ChatEscalations")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_escalation_status_fk");

                    b.Navigation("Chat");

                    b.Navigation("ChatEscalationStatus");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatMessage", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.Chat", "Chat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("Cid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_message_chat_fk");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReport", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.Chat", "Chat")
                        .WithMany("ChatReports")
                        .HasForeignKey("Cid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_report_chat_fk");

                    b.HasOne("Common.DB.ClientDB.Models.ChatReportInstance", "ChatReportInstance")
                        .WithMany("ChatReports")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_report_instance_fk");

                    b.Navigation("Chat");

                    b.Navigation("ChatReportInstance");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportColumnValue", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.ChatReportTemplateColumn", "ChatReportTemplateColumn")
                        .WithMany("ChatReportColumnValues")
                        .HasForeignKey("ColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_report_column_value_column_fk");

                    b.HasOne("Common.DB.ClientDB.Models.ChatReport", "ChatReport")
                        .WithMany("ChatReportColumnValues")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_report_column_value_report_fk");

                    b.Navigation("ChatReport");

                    b.Navigation("ChatReportTemplateColumn");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportInstance", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.ChatReportInstanceGoogleSheets", "ChatReportInstanceGoogleSheets")
                        .WithMany("ChatReportInstances")
                        .HasForeignKey("GoogleSheetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_report_instance_google_sheets_fk");

                    b.HasOne("Common.DB.ClientDB.Models.ChatReportTemplate", "ChatReportTemplate")
                        .WithMany("ChatReportInstances")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_report_instance_template_fk");

                    b.Navigation("ChatReportInstanceGoogleSheets");

                    b.Navigation("ChatReportTemplate");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportInstanceGoogleSheets", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.GoogleCredential", "GoogleCredential")
                        .WithMany("ChatReportFormatGoogleSheets")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_report_format_google_sheets_credential_fk");

                    b.Navigation("GoogleCredential");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportTemplate", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.ChatReportFormat", "Format")
                        .WithMany("ChatReportTemplates")
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_report_template_format_fk");

                    b.Navigation("Format");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportTemplateColumn", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.ChatReportTemplate", "ChatReportTemplate")
                        .WithMany("ChatReportTemplateColumns")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_report_template_column_template_fk");

                    b.HasOne("Common.DB.ClientDB.Models.ChatReportTemplateColumnType", "ChatReportTemplateColumnType")
                        .WithMany("ChatReportTemplateColumns")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_report_template_column_type_fk");

                    b.Navigation("ChatReportTemplate");

                    b.Navigation("ChatReportTemplateColumnType");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Conversation", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.AiAgent", "AiAgent")
                        .WithMany("Conversations")
                        .HasForeignKey("AiAgentId")
                        .HasConstraintName("conversation_ai_agent_fk");

                    b.HasOne("Common.DB.ClientDB.Models.HumanAgent", "HumanAgent")
                        .WithMany("Conversations")
                        .HasForeignKey("HumanAgentId")
                        .HasConstraintName("conversation_human_agent_fk");

                    b.HasOne("Common.DB.ClientDB.Models.ChatMessage", "LastChatMessage")
                        .WithOne()
                        .HasForeignKey("Common.DB.ClientDB.Models.Conversation", "LastChatMessageId")
                        .HasConstraintName("chat_conversation_last_chat_message_fk");

                    b.HasOne("Common.DB.ClientDB.Models.User", "User")
                        .WithMany("Conversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("conversation_user_fk");

                    b.Navigation("AiAgent");

                    b.Navigation("HumanAgent");

                    b.Navigation("LastChatMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.InstructionsRule", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.Instructions", "Instructions")
                        .WithMany("InstructionsRules")
                        .HasForeignKey("Iid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("instructions_rule_instruction_fk");

                    b.HasOne("Common.DB.ClientDB.Models.Rule", "Rule")
                        .WithMany("InstructionsRules")
                        .HasForeignKey("Rid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("instructions_rule_rule_fk");

                    b.Navigation("Instructions");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.InstructionsSection", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.Instructions", "Instructions")
                        .WithMany("InstructionsSections")
                        .HasForeignKey("Iid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("instructions_section_instruction_fk");

                    b.Navigation("Instructions");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Project", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.Industry", "Industry")
                        .WithMany("Projects")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("project_industry_fk");

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.RuleSetRule", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.Rule", "Rule")
                        .WithMany("RuleSetRules")
                        .HasForeignKey("Rid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rule_set_rules_rule_fk");

                    b.HasOne("Common.DB.ClientDB.Models.RuleSet", "RuleSet")
                        .WithMany("RuleSetRules")
                        .HasForeignKey("Rsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rule_set_rules_rule_set_fk");

                    b.Navigation("Rule");

                    b.Navigation("RuleSet");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Session", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.Conversation", "Conversation")
                        .WithMany("Sessions")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("session_conversation__fk");

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Subscription", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.SubscriptionType", "SubscriptionType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscription_subscription_type_fk");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Workflow", b =>
                {
                    b.HasOne("Common.DB.ClientDB.Models.Project", "Project")
                        .WithMany("Workflows")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("workflow_project_fk");

                    b.HasOne("Common.DB.ClientDB.Models.Subscription", "Subscription")
                        .WithMany("Workflows")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("workflow_subscription_fk");

                    b.HasOne("Common.DB.ClientDB.Models.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany("Workflows")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("workflow_template_fk");

                    b.Navigation("Project");

                    b.Navigation("Subscription");

                    b.Navigation("WorkflowTemplate");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.AiAgent", b =>
                {
                    b.Navigation("Conversations");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Chat", b =>
                {
                    b.Navigation("ChatEscalation")
                        .IsRequired();

                    b.Navigation("ChatMessages");

                    b.Navigation("ChatReports");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatEscalationStatus", b =>
                {
                    b.Navigation("ChatEscalations");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReport", b =>
                {
                    b.Navigation("ChatReportColumnValues");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportFormat", b =>
                {
                    b.Navigation("ChatReportTemplates");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportInstance", b =>
                {
                    b.Navigation("ChatReports");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportInstanceGoogleSheets", b =>
                {
                    b.Navigation("ChatReportInstances");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportTemplate", b =>
                {
                    b.Navigation("ChatReportInstances");

                    b.Navigation("ChatReportTemplateColumns");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportTemplateColumn", b =>
                {
                    b.Navigation("ChatReportColumnValues");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.ChatReportTemplateColumnType", b =>
                {
                    b.Navigation("ChatReportTemplateColumns");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Conversation", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.GoogleCredential", b =>
                {
                    b.Navigation("ChatReportFormatGoogleSheets");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.HumanAgent", b =>
                {
                    b.Navigation("Conversations");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Industry", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Instructions", b =>
                {
                    b.Navigation("AiAgents");

                    b.Navigation("InstructionsRules");

                    b.Navigation("InstructionsSections");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Project", b =>
                {
                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Rule", b =>
                {
                    b.Navigation("InstructionsRules");

                    b.Navigation("RuleSetRules");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.RuleSet", b =>
                {
                    b.Navigation("RuleSetRules");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Subscription", b =>
                {
                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.SubscriptionType", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.User", b =>
                {
                    b.Navigation("Conversations");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.Workflow", b =>
                {
                    b.Navigation("AiAgents");
                });

            modelBuilder.Entity("Common.DB.ClientDB.Models.WorkflowTemplate", b =>
                {
                    b.Navigation("Workflows");
                });
#pragma warning restore 612, 618
        }
    }
}
